# ─────────────────────────────────────────────────────────────
# Dockerfile.dev — Imagen de desarrollo para GestUnifServ
# Incluye dependencias de runtime, herramientas de testing,
# Jupyter y pandas. Preparada para usarse con docker-compose.override.yml.
# ─────────────────────────────────────────────────────────────

FROM python:3.11-slim

# ───────────────
# Configuración básica de Python
# ───────────────
# - PYTHONDONTWRITEBYTECODE: evita crear archivos .pyc
# - PYTHONUNBUFFERED: logs inmediatos (sin buffering)
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

WORKDIR /app

# ───────────────
# Instalar dependencias del sistema necesarias
# ───────────────
# build-essential: compilar paquetes nativos
# libpq-dev: driver de PostgreSQL para psycopg/asyncpg
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# ───────────────
# Instalar dependencias de Python (producción + desarrollo)
# ───────────────
COPY requirements.txt dev-requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt -r dev-requirements.txt

# ───────────────
# Copiar el proyecto
# ───────────────
# Para desarrollo, solo copiamos los directorios base.
# Con docker-compose.override.yml montaremos src/ y data/ en vivo.
COPY notebooks/ ./notebooks/
COPY tests/ ./tests/

# ───────────────
# Exponer puertos
# ───────────────
# FastAPI (Uvicorn)
EXPOSE 8000   
# Jupyter (opcional, para notebooks)
EXPOSE 8888   

# ───────────────
# Comando por defecto
# ───────────────
# En override usaremos uvicorn con --reload, así que aquí lo dejamos simple.
CMD ["uvicorn", "src.risk_api:app", "--host", "0.0.0.0", "--port", "8000"]
